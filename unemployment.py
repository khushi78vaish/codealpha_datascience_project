# -*- coding: utf-8 -*-
"""Unemployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wbw0e1SzHH5UoM-FdCPxpRhCdUq93OzX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from datetime import datetime

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Unemployment in India (1).csv')
df = df.dropna()
# Check if 'Date' column exists, if not, try finding the correct column name
if 'Date' not in df.columns:
    # Print all column names for inspection
    print(df.columns)
    # Assume the date column is named ' Date' (with a leading space)
    # If not, adjust this based on the actual column name from the printout
    # The format string is modified to include a leading space to match the data
    df['Date'] = pd.to_datetime(df[' Date'], format=' %d-%m-%Y')
else:
    df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Month'] = df['Date'].dt.month_name()
df['Year'] = df['Date'].dt.year
df.columns = df.columns.str.strip() # This will remove leading/trailing spaces from all columns

print("Data Overview:")
print(df.head())
print("\nSummary Statistics:")
print(df.describe())

plt.figure(figsize=(10, 6))
sns.histplot(df['Estimated Unemployment Rate (%)'], bins=30, kde=True)
plt.title('Distribution of Unemployment Rate')
plt.show()

region_unemp = df.groupby('Region')['Estimated Unemployment Rate (%)'].mean().sort_values(ascending=False)
plt.figure(figsize=(12, 8))
region_unemp.plot(kind='bar')
plt.title('Average Unemployment Rate by Region')
plt.ylabel('Unemployment Rate (%)')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='Area', y='Estimated Unemployment Rate (%)', data=df)
plt.title('Unemployment Rate: Urban vs Rural')
plt.show()

monthly_unemp = df.groupby(['Year', 'Month'])['Estimated Unemployment Rate (%)'].mean().unstack()
month_order = ['January', 'February', 'March', 'April', 'May', 'June',
               'July', 'August', 'September', 'October', 'November', 'December']
monthly_unemp = monthly_unemp.reindex(columns=month_order)

plt.figure(figsize=(12, 6))
monthly_unemp.T.plot(marker='o')
plt.title('Monthly Average Unemployment Rate (2019-2020)')
plt.ylabel('Unemployment Rate (%)')
plt.grid(True)
plt.show()

# Convert 'Date' column to DatetimeIndex if it's not already
if not isinstance(df.index, pd.DatetimeIndex) and 'Date' in df.columns:
    df = df.set_index('Date')

# Filter data using .loc with a date range

print("Index type:", type(df.index))
print("Date range:", df.index.min(), "to", df.index.max())

df = df.sort_index()

# Convert 'Date' column to DatetimeIndex if it's not already
if not isinstance(df.index, pd.DatetimeIndex) and 'Date' in df.columns:
    df = df.set_index('Date')

# Filter data using .loc with a date range
df = df.sort_index()  # Ensure the index is sorted

try:
    # Define your analysis periods
    pre_covid = df.loc['2019-04-01':'2019-06-30'].copy()
    covid_period = df.loc['2020-04-01':'2020-06-30'].copy()

    print(f"\nFound {len(pre_covid)} pre-COVID records (Apr-Jun 2019)")
    print(f"Found {len(covid_period)} COVID period records (Apr-Jun 2020)")

except Exception as e:
    print("Error in date filtering:", e)
    # Fallback to alternative date handling if needed
    # This handles cases where the index is not a DatetimeIndex
    # Convert index to DatetimeIndex
    df.index = pd.to_datetime(df.index.to_flat_index(), errors='coerce').to_series()
    # errors='coerce' handles invalid date formats by setting them to NaT (Not a Time)

    # Drop rows with NaT index values (using .dropna() with subset)
    df = df[df.index.notna()]  # Use this instead of df.dropna(index=True)
    df = df.sort_index()

    # Retry filtering
    pre_covid = df.loc['2019-04-01':'2019-06-30'].copy()
    covid_period = df.loc['2020-04-01':'2020-06-30'].copy()

if len(pre_covid) == 0 or len(covid_period) == 0:
    print("\nWarning: No data for specified periods. Using available data...")
    available_years = df.index.year.unique()
    print("Available years:", available_years)

    # Alternative analysis with whatever data exists
    if len(available_years) >= 2:
        years = sorted(available_years)[-2:]  # Take two most recent years
        year1, year2 = years[0], years[1]
        period1 = df.loc[f'{year1}-04':f'{year1}-06'].copy()
        period2 = df.loc[f'{year2}-04':f'{year2}-06'].copy()

if len(pre_covid) > 0 and len(covid_period) > 0:
    # Calculate average unemployment rates
    pre_avg = pre_covid['Estimated Unemployment Rate (%)'].mean()
    covid_avg = covid_period['Estimated Unemployment Rate (%)'].mean()

    print("\nUnemployment Rate Comparison:")
    print(f"Pre-COVID (2019): {pre_avg:.2f}%")
    print(f"During COVID (2020): {covid_avg:.2f}%")
    print(f"Change: {covid_avg-pre_avg:+.2f} percentage points")

    # Visualization
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=pre_covid, x=pre_covid.index,
                 y='Estimated Unemployment Rate (%)',
                 label='Pre-COVID (2019)')
    sns.lineplot(data=covid_period, x=covid_period.index,
                 y='Estimated Unemployment Rate (%)',
                 label='COVID Period (2020)')
    plt.title('Unemployment Rate Trends Comparison')
    plt.ylabel('Unemployment Rate (%)')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()

    # Regional impact analysis
    impact = covid_period.groupby('Region')['Estimated Unemployment Rate (%)'].mean() - \
             pre_covid.groupby('Region')['Estimated Unemployment Rate (%)'].mean()

    print("\nTop 5 Most Impacted Regions:")
    print(impact.sort_values(ascending=False).head(5).to_string())

    # Plot regional impact
    plt.figure(figsize=(12, 8))
    impact.sort_values().plot(kind='barh')
    plt.title('COVID-19 Impact on Unemployment by Region')
    plt.xlabel('Change in Unemployment Rate (percentage points)')
    plt.grid(axis='x', linestyle='--')
    plt.tight_layout()
    plt.show()

# Monthly averages
monthly_avg = df.resample('M')['Estimated Unemployment Rate (%)'].mean()

# 3-month rolling average
df['Rolling_Avg'] = df['Estimated Unemployment Rate (%)'].rolling('90D').mean()

# Compare same months across years
df['Month'] = df.index.month
yoy = df.groupby(['Month', df.index.year])['Estimated Unemployment Rate (%)'].mean().unstack()